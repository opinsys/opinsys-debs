From 666209988e4bdbb659c077910b38eebec6689bea Mon Sep 17 00:00:00 2001
From: Alberto Milone <alberto.milone@canonical.com>
Date: Wed, 12 Jun 2013 15:31:53 +0200
Subject: [PATCH 1/1] Add support for 3.10

Patch based on the one originally written by user "Unhelpful" on the following page:
https://devtalk.nvidia.com/default/topic/543728/linux/building-nvidia-driver-on-kernel-3-9-0/2
---
 nv-i2c.c    |   13 +-
 nv-procfs.c |  501 ++++++++++++++++++++++++++++++++---------------------------
 2 files changed, 276 insertions(+), 238 deletions(-)

diff --git a/nv-i2c.c b/nv-i2c.c
index a702506..24c2611 100644
--- a/nv-i2c.c
+++ b/nv-i2c.c
@@ -311,8 +311,6 @@ void* NV_API_CALL nv_i2c_add_adapter(nv_state_t *nv, NvU32 port)
 BOOL NV_API_CALL nv_i2c_del_adapter(nv_state_t *nv, void *data)
 {
     struct i2c_adapter *pI2cAdapter = (struct i2c_adapter *)data;
-    int osstatus = 0;
-    BOOL wasReleased = FALSE;
 
 #if defined(KERNEL_2_4)
     if (!NV_WEAK_SYMBOL_PRESENT(i2c_add_adapter))
@@ -324,15 +322,10 @@ BOOL NV_API_CALL nv_i2c_del_adapter(nv_state_t *nv, void *data)
     if (!pI2cAdapter) return FALSE;
 
     // attempt release with the OS
-    osstatus = i2c_del_adapter(pI2cAdapter);
-
-    if (!osstatus)
-    {
-        os_free_mem(pI2cAdapter);
-        wasReleased = TRUE;
-    }
+    i2c_del_adapter(pI2cAdapter);
+    os_free_mem(pI2cAdapter);
 
-    return wasReleased;
+    return TRUE;
 }
 
 #else // (defined(CONFIG_I2C) || defined(CONFIG_I2C_MODULE))
diff --git a/nv-procfs.c b/nv-procfs.c
index 3e05ef5..d4ca4b8 100644
--- a/nv-procfs.c
+++ b/nv-procfs.c
@@ -60,60 +60,41 @@ static char nv_registry_keys[NV_MAX_REGISTRY_KEYS_LENGTH];
         __entry;                                          \
     })
 
-#define NV_CREATE_PROC_FILE(name,parent,__read_proc,           \
-    __write_proc,__fops,__data)                                \
-   ({                                                          \
-        struct proc_dir_entry *__entry;                        \
-        int __mode = (S_IFREG | S_IRUGO);                      \
-        if ((NvUPtr)(__write_proc) != 0)                       \
-            __mode |= S_IWUSR;                                 \
-        __entry = NV_CREATE_PROC_ENTRY(name, __mode, parent);  \
-        if (__entry != NULL)                                   \
-        {                                                      \
-            if ((NvUPtr)(__read_proc) != 0)                    \
-                __entry->read_proc = (__read_proc);            \
-            if ((NvUPtr)(__write_proc) != 0)                   \
-            {                                                  \
-                __entry->write_proc = (__write_proc);          \
-                __entry->proc_fops = (__fops);                 \
-            }                                                  \
-            __entry->data = (__data);                          \
-        }                                                      \
-        __entry;                                               \
-    })
+#define NV_PROC_RW (S_IFREG|S_IRUGO|S_IWUSR)
+#define NV_PROC_RO (S_IFREG|S_IRUGO)
 
 #define NV_CREATE_PROC_DIR(name,parent)                        \
    ({                                                          \
         struct proc_dir_entry *__entry;                        \
         int __mode = (S_IFDIR | S_IRUGO | S_IXUGO);            \
-        __entry = NV_CREATE_PROC_ENTRY(name, __mode, parent);  \
+        __entry = proc_mkdir_mode(name, __mode, parent);       \
         __entry;                                               \
     })
 
+#if LINUX_VERSION_CODE <= KERNEL_VERSION(3,9,255)
+static inline void *PDE_DATA(const struct inode *inode) {
+	return PDE(inode)->data;
+}
+#endif
+
 #define NV_PROC_WRITE_BUFFER_SIZE   (64 * RM_PAGE_SIZE)
 
 static int
-nv_procfs_read_gpu_info(
-    char  *page,
-    char **start,
-    off_t  off,
-    int    count,
-    int   *eof,
-    void  *data
+nv_procfs_show_gpu_info(
+    struct seq_file *m,
+    void *v
 )
 {
-    nv_state_t *nv = data;
+    nv_state_t *nv = m->private;
     nv_linux_state_t *nvl = NV_GET_NVL_FROM_NV_STATE(nv);
     struct pci_dev *dev = nvl->dev;
     char *type, *fmt, tmpstr[NV_DEVICE_NAME_LENGTH];
-    int len = 0, status;
+    int status;
     NvU8 *uuid;
     NvU32 vbios_rev1, vbios_rev2, vbios_rev3, vbios_rev4, vbios_rev5;
     NvU32 fpga_rev1, fpga_rev2, fpga_rev3;
     nv_stack_t *sp = NULL;
 
-    *eof = 1;
-
     NV_KMEM_CACHE_ALLOC_STACK(sp);
     if (sp == NULL)
     {
@@ -134,31 +115,31 @@ nv_procfs_read_gpu_info(
         if (rm_get_device_name(sp, nv, dev->device, dev->subsystem_vendor,
                     dev->subsystem_device, NV_DEVICE_NAME_LENGTH,
                     tmpstr) != RM_OK)
-        {
+ 		       {
             strcpy (tmpstr, "Unknown");
         }
     }
 
-    len += sprintf(page+len, "Model: \t\t %s\n", tmpstr);
-    len += sprintf(page+len, "IRQ:   \t\t %d\n", nv->interrupt_line);
+    seq_printf(m, "Model: \t\t %s\n", tmpstr);
+    seq_printf(m, "IRQ:   \t\t %d\n", nv->interrupt_line);
 
     if (NV_IS_GVI_DEVICE(nv))
     {
         status = rm_gvi_get_firmware_version(sp, nv, &fpga_rev1, &fpga_rev2,
                                              &fpga_rev3);
         if (status != RM_OK)
-            len += sprintf(page+len, "Firmware: \t ????.??.??\n");
+            seq_printf(m, "Firmware: \t ????.??.??\n");
         else
         {
             fmt = "Firmware: \t %x.%x.%x\n";
-            len += sprintf(page+len, fmt, fpga_rev1, fpga_rev2, fpga_rev3);
+            seq_printf(m, fmt, fpga_rev1, fpga_rev2, fpga_rev3);
         }
     }
     else
     {
         if (rm_get_gpu_uuid(sp, nv, &uuid, NULL) == RM_OK)
         {
-            len += sprintf(page+len, "GPU UUID: \t %s\n", (char *)uuid);
+            seq_printf(m, "GPU UUID: \t %s\n", (char *)uuid);
             os_free_mem(uuid);
         }
 
@@ -166,12 +147,12 @@ nv_procfs_read_gpu_info(
                     &vbios_rev3, &vbios_rev4,
                     &vbios_rev5) != RM_OK)
         {
-            len += sprintf(page+len, "Video BIOS: \t ??.??.??.??.??\n");
+            seq_printf(m, "Video BIOS: \t ??.??.??.??.??\n");
         }
         else
         {
             fmt = "Video BIOS: \t %02x.%02x.%02x.%02x.%02x\n";
-            len += sprintf(page+len, fmt, vbios_rev1, vbios_rev2, vbios_rev3,
+            seq_printf(m, fmt, vbios_rev1, vbios_rev2, vbios_rev3,
                            vbios_rev4, vbios_rev5);
         }
     }
@@ -182,12 +163,12 @@ nv_procfs_read_gpu_info(
         type = "PCI-E";
     else
         type = "PCI";
-    len += sprintf(page+len, "Bus Type: \t %s\n", type);
+    seq_printf(m, "Bus Type: \t %s\n", type);
 
-    len += sprintf(page+len, "DMA Size: \t %d bits\n",
+    seq_printf(m, "DMA Size: \t %d bits\n",
      nv_count_bits(dev->dma_mask));
-    len += sprintf(page+len, "DMA Mask: \t 0x%llx\n", dev->dma_mask);
-    len += sprintf(page+len, "Bus Location: \t %04x:%02x.%02x.%x\n",
+    seq_printf(m, "DMA Mask: \t 0x%llx\n", dev->dma_mask);
+    seq_printf(m, "Bus Location: \t %04x:%02x.%02x.%x\n",
                    nv->domain, nv->bus, nv->slot, PCI_FUNC(dev->devfn));
 #if defined(DEBUG)
     do
@@ -195,7 +176,7 @@ nv_procfs_read_gpu_info(
         int j;
         for (j = 0; j < NV_GPU_NUM_BARS; j++)
         {
-            len += sprintf(page+len, "BAR%u: \t\t 0x%llx (%lluMB)\n",
+            seq_printf(m, "BAR%u: \t\t 0x%llx (%lluMB)\n",
                            j, nv->bars[j].address, (nv->bars[j].size >> 20));
         }
     } while (0);
@@ -203,26 +184,120 @@ nv_procfs_read_gpu_info(
 
     NV_KMEM_CACHE_FREE_STACK(sp);
 
-    return len;
+    return 0;
+}
+
+static int
+nv_procfs_open_gpu_info(
+    struct inode *inode,
+    struct file *file
+)
+{
+    return single_open(file, nv_procfs_show_gpu_info, PDE_DATA(inode));
+}
+
+static const struct file_operations nv_procfs_gpu_info_fops = {
+    .owner   = THIS_MODULE,
+    .open    = nv_procfs_open_gpu_info,
+    .read    = seq_read,
+    .llseek  = seq_lseek,
+    .release = single_release,
+};
+
+static int
+nv_procfs_show_version(
+    struct seq_file *m,
+    void *v
+)
+{
+    seq_printf(m, "NVRM version: %s\n", pNVRM_ID);
+    seq_printf(m, "GCC version:  %s\n", NV_COMPILER);
+
+    return 0;
 }
 
 static int
-nv_procfs_read_version(
-    char  *page,
-    char **start,
-    off_t  off,
-    int    count,
-    int   *eof,
-    void  *data
+nv_procfs_open_version(
+    struct inode *inode,
+    struct file *file
+)
+{
+    return single_open(file, nv_procfs_show_version, NULL);
+}
+
+static const struct file_operations nv_procfs_version_fops = {
+    .owner   = THIS_MODULE,
+    .open    = nv_procfs_open_version,
+    .read    = seq_read,
+    .llseek  = seq_lseek,
+    .release = single_release,
+};
+
+static int
+nv_procfs_show_registry(
+    struct seq_file *m,
+    void *v
+)
+{
+    nv_state_t *nv = m->private;
+    nv_linux_state_t *nvl = NULL;
+    char *registry_keys;
+
+    if (nv != NULL)
+        nvl = NV_GET_NVL_FROM_NV_STATE(nv);
+    registry_keys = ((nvl != NULL) ?
+            nvl->registry_keys : nv_registry_keys);
+
+    seq_printf(m, "Binary: \"%s\"\n", registry_keys);
+
+    return 0;
+}
+
+static ssize_t
+nv_procfs_write_registry(
+    struct file       *file,
+    const char __user *buffer,
+    size_t             count,
+    loff_t            *pos
 )
 {
-    int len = 0;
-    *eof = 1;
+    int status = 0;
+    nv_file_private_t *nvfp = NV_GET_FILE_PRIVATE(file);
+    char *proc_buffer;
+    unsigned long bytes_left;
+
+    down(&nvfp->fops_sp_lock[NV_FOPS_STACK_INDEX_PROCFS]);
+
+    bytes_left = (NV_PROC_WRITE_BUFFER_SIZE - nvfp->off - 1);
+
+    if (count == 0)
+    {
+        status = -EINVAL;
+        goto done;
+    }
+    else if ((bytes_left == 0) || (count > bytes_left))
+    {
+        status = -ENOSPC;
+        goto done;
+    }
+
+    proc_buffer = &((char *)nvfp->data)[nvfp->off];
+
+    if (copy_from_user(proc_buffer, buffer, count))
+    {
+        nv_printf(NV_DBG_ERRORS, "NVRM: failed to copy in proc data!\n");
+        status = -EFAULT;
+    }
+    else
+    {
+        nvfp->proc_data = PDE_DATA(file->f_inode);
+        nvfp->off += count;
+    }
 
-    len += sprintf(page+len, "NVRM version: %s\n", pNVRM_ID);
-    len += sprintf(page+len, "GCC version:  %s\n", NV_COMPILER);
+done:
+    up(&nvfp->fops_sp_lock[NV_FOPS_STACK_INDEX_PROCFS]);
 
-    return len;
+    return ((status < 0) ? status : count);
 }
 
 static struct pci_dev *nv_get_agp_device_by_class(unsigned int class)
@@ -255,24 +330,17 @@ static struct pci_dev *nv_get_agp_device_by_class(unsigned int class)
 }
 
 static int
-nv_procfs_read_agp_info(
-    char  *page,
-    char **start,
-    off_t  off,
-    int    count,
-    int   *eof,
-    void  *data
+nv_procfs_show_agp_info(
+    struct seq_file *m,
+    void *v
 )
 {
-    nv_state_t *nv = data;
+    nv_state_t *nv = m->private;
     nv_linux_state_t *nvl = NULL;
     struct pci_dev *dev;
     char   *fw, *sba;
     u8     cap_ptr;
     u32    status, command, agp_rate;
-    int    len = 0;
-
-    *eof = 1;
 
     if (nv != NULL)
     {
@@ -285,12 +353,12 @@ nv_procfs_read_agp_info(
         if (!dev)
             return 0;
 
-        len += sprintf(page+len, "Host Bridge: \t ");
+        seq_printf(m, "Host Bridge: \t ");
 
 #if defined(CONFIG_PCI_NAMES)
-        len += sprintf(page+len, "%s\n", NV_PCI_DEVICE_NAME(dev));
+        seq_printf(m, "%s\n", NV_PCI_DEVICE_NAME(dev));
 #else
-        len += sprintf(page+len, "PCI device %04x:%04x\n",
+        seq_printf(m, "PCI device %04x:%04x\n",
                 dev->vendor, dev->device);
 #endif
     }
@@ -303,48 +371,75 @@ nv_procfs_read_agp_info(
     fw  = (status & 0x00000010) ? "Supported" : "Not Supported";
     sba = (status & 0x00000200) ? "Supported" : "Not Supported";
 
-    len += sprintf(page+len, "Fast Writes: \t %s\n", fw);
-    len += sprintf(page+len, "SBA: \t\t %s\n", sba);
+    seq_printf(m, "Fast Writes: \t %s\n", fw);
+    seq_printf(m, "SBA: \t\t %s\n", sba);
 
     agp_rate = status & 0x7;
     if (status & 0x8)
         agp_rate <<= 2;
 
-    len += sprintf(page+len, "AGP Rates: \t %s%s%s%s\n",
+    seq_printf(m, "AGP Rates: \t %s%s%s%s\n",
             (agp_rate & 0x00000008) ? "8x " : "",
             (agp_rate & 0x00000004) ? "4x " : "",
             (agp_rate & 0x00000002) ? "2x " : "",
             (agp_rate & 0x00000001) ? "1x " : "");
 
-    len += sprintf(page+len, "Registers: \t 0x%08x:0x%08x\n", status, command);
+    seq_printf(m, "Registers: \t 0x%08x:0x%08x\n", status, command);
 
     if (nvl == NULL)
         NV_PCI_DEV_PUT(dev);
 
-    return len;
+    return 0;
 }
 
 static int
-nv_procfs_read_agp_status(
-    char  *page,
-    char **start,
-    off_t  off,
-    int    count,
-    int   *eof,
-    void  *data
+nv_procfs_read_agp_info(
+    struct inode *inode,
+    struct file *file
+)
+{
+    return single_open(file, nv_procfs_show_agp_info, NULL);
+}
+
+static const struct file_operations nv_procfs_read_agp_info_fops = {
+    .owner   = THIS_MODULE,
+    .open    = nv_procfs_read_agp_info,
+    .read    = seq_read,
+    .llseek  = seq_lseek,
+    .release = single_release,
+};
+
+static int
+nv_procfs_read_agp_info_gpu(
+    struct inode *inode,
+    struct file *file
+)
+{
+    return single_open(file, nv_procfs_show_agp_info, PDE_DATA(inode));
+}
+
+static const struct file_operations nv_procfs_read_agp_info_gpu_fops = {
+    .owner   = THIS_MODULE,
+    .open    = nv_procfs_read_agp_info_gpu,
+    .read    = seq_read,
+    .llseek  = seq_lseek,
+    .release = single_release,
+};
+
+static int
+nv_procfs_show_agp_status(
+    struct seq_file *m,
+    void *v
 )
 {
-    nv_state_t *nv = data;
+    nv_state_t *nv = m->private;
     struct pci_dev *dev;
     char   *fw, *sba, *drv;
-    int    len = 0;
     u8     cap_ptr;
     u32    scratch;
     u32    status, command, agp_rate;
     nv_stack_t *sp = NULL;
 
-    *eof = 1;
-
     dev = nv_get_agp_device_by_class(PCI_CLASS_BRIDGE_HOST);
     if (!dev)
         return 0;
@@ -366,22 +461,22 @@ nv_procfs_read_agp_status(
 
     if (NV_AGP_ENABLED(nv) && (command & 0x100))
     {
-        len += sprintf(page+len, "Status: \t Enabled\n");
+        seq_printf(m, "Status: \t Enabled\n");
 
         drv = NV_OSAGP_ENABLED(nv) ? "AGPGART" : "NVIDIA";
-        len += sprintf(page+len, "Driver: \t %s\n", drv);
+        seq_printf(m, "Driver: \t %s\n", drv);
 
         agp_rate = command & 0x7;
         if (status & 0x8)
             agp_rate <<= 2;
 
-        len += sprintf(page+len, "AGP Rate: \t %dx\n", agp_rate);
+        seq_printf(m, "AGP Rate: \t %dx\n", agp_rate);
 
         fw = (command & 0x00000010) ? "Enabled" : "Disabled";
-        len += sprintf(page+len, "Fast Writes: \t %s\n", fw);
+        seq_printf(m, "Fast Writes: \t %s\n", fw);
 
         sba = (command & 0x00000200) ? "Enabled" : "Disabled";
-        len += sprintf(page+len, "SBA: \t\t %s\n", sba);
+        seq_printf(m, "SBA: \t\t %s\n", sba);
     }
     else
     {
@@ -394,7 +489,7 @@ nv_procfs_read_agp_status(
             return 0;
         }
 
-        len += sprintf(page+len, "Status: \t Disabled\n\n");
+        seq_printf(m, "Status: \t Disabled\n\n");
 
         /*
          * If we find AGP is disabled, but the RM registry indicates it
@@ -409,7 +504,7 @@ nv_procfs_read_agp_status(
 
         if (agp_config != NVOS_AGP_CONFIG_DISABLE_AGP && NV_AGP_FAILED(nv))
         {
-            len += sprintf(page+len,
+            seq_printf(m,
                   "AGP initialization failed, please check the ouput  \n"
                   "of the 'dmesg' command and/or your system log file \n"
                   "for additional information on this problem.        \n");
@@ -419,9 +514,27 @@ nv_procfs_read_agp_status(
     }
 
     NV_PCI_DEV_PUT(dev);
-    return len;
+    return 0;
+}
+
+static int
+nv_procfs_read_agp_status(
+    struct inode *inode,
+    struct file *file
+)
+{
+    return single_open(file, nv_procfs_show_agp_status, PDE_DATA(inode));
 }
 
+static const struct file_operations nv_procfs_read_agp_status_fops = {
+    .owner   = THIS_MODULE,
+    .open    = nv_procfs_read_agp_status,
+    .read    = seq_read,
+    .llseek  = seq_lseek,
+    .release = single_release,
+};
+
+
 static int
 nv_procfs_open_registry(
     struct inode *inode,
@@ -432,7 +545,7 @@ nv_procfs_open_registry(
     nv_stack_t *sp = NULL;
 
     if (0 == (file->f_mode & FMODE_WRITE))
-        return 0;
+        return single_open(file, nv_procfs_show_registry, PDE_DATA(inode));
 
     nvfp = nv_alloc_file_private();
     if (nvfp == NULL)
@@ -481,6 +594,9 @@ nv_procfs_close_registry(
     RM_STATUS rm_status;
     int rc = 0;
 
+    if (0 == (file->f_mode & FMODE_WRITE))
+        return single_release(inode, file);
+
     nvfp = NV_GET_FILE_PRIVATE(file);
     if (nvfp == NULL)
         return 0;
@@ -545,122 +661,81 @@ done:
     return rc;
 }
 
-static struct file_operations nv_procfs_registry_fops = {
+static const struct file_operations nv_procfs_registry_fops = {
     .open    = nv_procfs_open_registry,
+    .read    = seq_read,
+    .llseek  = seq_lseek,
+    .write   = nv_procfs_write_registry,
     .release = nv_procfs_close_registry,
 };
 
 static int
-nv_procfs_read_params(
-    char  *page,
-    char **start,
-    off_t  off,
-    int    count,
-    int   *eof,
-    void  *data
+nv_procfs_show_params(
+    struct seq_file *m,
+    void *v
 )
 {
     unsigned int i;
-    int len = 0;
     nv_parm_t *entry;
 
-    *eof = 1;
 
     for (i = 0; (entry = &nv_parms[i])->name != NULL; i++)
-        len += sprintf(page+len, "%s: %u\n", entry->name, *entry->data);
+        seq_printf(m, "%s: %u\n", entry->name, *entry->data);
 
-    len += sprintf(page+len, "RegistryDwords: \"%s\"\n",
+    seq_printf(m, "RegistryDwords: \"%s\"\n",
                 (NVreg_RegistryDwords != NULL) ? NVreg_RegistryDwords : "");
-    len += sprintf(page+len, "RmMsg: \"%s\"\n",
+    seq_printf(m, "RmMsg: \"%s\"\n",
                 (NVreg_RmMsg != NULL) ? NVreg_RmMsg : "");
 
-    return len;
+    return 0;
 }
 
 static int
-nv_procfs_read_registry(
-    char  *page,
-    char **start,
-    off_t  off,
-    int    count,
-    int   *eof,
-    void  *data
-)
+nv_procfs_open_params(
+    struct inode *inode,
+    struct file *file
+)    
 {
-    nv_state_t *nv = data;
-    nv_linux_state_t *nvl = NULL;
-    char *registry_keys;
+    return single_open(file, nv_procfs_show_params, NULL);
+}
 
-    if (nv != NULL)
-        nvl = NV_GET_NVL_FROM_NV_STATE(nv);
-    registry_keys = ((nvl != NULL) ?
-            nvl->registry_keys : nv_registry_keys);
+static const struct file_operations nv_procfs_params_fops = {
+    .owner   = THIS_MODULE,
+    .open    = nv_procfs_open_params,
+    .read    = seq_read,
+    .llseek  = seq_lseek,
+    .release = single_release,
+};
 
-    *eof = 1;
-    return sprintf(page, "Binary: \"%s\"\n", registry_keys);
-}
 
 static int
-nv_procfs_write_registry(
-    struct file   *file,
-    const char    *buffer,
-    unsigned long  count,
-    void          *data
+nv_procfs_show_text_file(
+    struct seq_file *m,
+    void *v
 )
 {
-    int status = 0;
-    nv_file_private_t *nvfp = NV_GET_FILE_PRIVATE(file);
-    char *proc_buffer;
-    unsigned long bytes_left;
-
-    down(&nvfp->fops_sp_lock[NV_FOPS_STACK_INDEX_PROCFS]);
-
-    bytes_left = (NV_PROC_WRITE_BUFFER_SIZE - nvfp->off - 1);
-
-    if (count == 0)
-    {
-        status = -EINVAL;
-        goto done;
-    }
-    else if ((bytes_left == 0) || (count > bytes_left))
-    {
-        status = -ENOSPC;
-        goto done;
-    }
-
-    proc_buffer = &((char *)nvfp->data)[nvfp->off];
-
-    if (copy_from_user(proc_buffer, buffer, count))
-    {
-        nv_printf(NV_DBG_ERRORS, "NVRM: failed to copy in proc data!\n");
-        status = -EFAULT;
-    }
-    else
-    {
-        nvfp->proc_data = data;
-        nvfp->off += count;
-    }
+    seq_printf(m, "%s", (char *)m->private);
 
-done:
-    up(&nvfp->fops_sp_lock[NV_FOPS_STACK_INDEX_PROCFS]);
-
-    return ((status < 0) ? status : (int)count);
+    return 0;
 }
 
 static int
-nv_procfs_read_text_file(
-    char  *page,
-    char **start,
-    off_t  off,
-    int    count,
-    int   *eof,
-    void  *data
+nv_procfs_open_text_file(
+    struct inode *inode,
+    struct file *file
 )
 {
-    *eof = 1;
-    return sprintf(page, "%s", (char *)data);
+    return single_open(file, nv_procfs_show_text_file, PDE_DATA(inode));
 }
 
+static const struct file_operations nv_procfs_text_fops = {
+    .owner   = THIS_MODULE,
+    .open    = nv_procfs_open_text_file,
+    .read    = seq_read,
+    .llseek  = seq_lseek,
+    .release = single_release,
+};
+
 static void
 nv_procfs_add_text_file(
     struct proc_dir_entry *parent,
@@ -668,22 +743,7 @@ nv_procfs_add_text_file(
     const char *text
 )
 {
-    NV_CREATE_PROC_FILE(filename, parent,
-            nv_procfs_read_text_file, NULL, NULL, (void *)text);
-}
-
-static void nv_procfs_unregister_all(struct proc_dir_entry *entry)
-{
-    while (entry)
-    {
-        struct proc_dir_entry *next = entry->next;
-        if (entry->subdir)
-            nv_procfs_unregister_all(entry->subdir);
-        remove_proc_entry(entry->name, entry->parent);
-        if (entry == proc_nvidia)
-            break;
-        entry = next;
-    }
+    proc_create_data(filename, NV_PROC_RO, parent, &nv_procfs_text_fops, (void *)text);
 }
 #endif
 
@@ -713,26 +773,11 @@ int nv_register_procfs(void)
     if (!proc_nvidia)
         goto failed;
 
-    entry = NV_CREATE_PROC_FILE("params", proc_nvidia,
-        nv_procfs_read_params, NULL, NULL, NULL);
+    entry = proc_create("params", NV_PROC_RO, proc_nvidia, &nv_procfs_params_fops);
     if (!entry)
         goto failed;
 
-    /*
-     * entry->proc_fops originally points to a constant
-     * structure, so to add more methods for the
-     * binary registry write path, we need to replace the
-     * said entry->proc_fops with a new fops structure.
-     * However, in preparation for this, we need to preserve
-     * the procfs read() and write() operations.
-     */
-    nv_procfs_registry_fops.read = entry->proc_fops->read;
-    nv_procfs_registry_fops.write = entry->proc_fops->write;
-
-    entry = NV_CREATE_PROC_FILE("registry", proc_nvidia,
-        nv_procfs_read_registry,
-        nv_procfs_write_registry,
-        &nv_procfs_registry_fops, NULL);
+    entry = proc_create("registry", NV_PROC_RW, proc_nvidia, &nv_procfs_registry_fops);
     if (!entry)
         goto failed;
 
@@ -753,8 +798,7 @@ int nv_register_procfs(void)
 
     nv_procfs_add_text_file(proc_nvidia_patches, "README", __README_patches);
 
-    entry = NV_CREATE_PROC_FILE("version", proc_nvidia,
-        nv_procfs_read_version, NULL, NULL, NULL);
+    entry = proc_create("version", NV_PROC_RO, proc_nvidia, &nv_procfs_version_fops);
     if (!entry)
         goto failed;
 
@@ -771,14 +815,12 @@ int nv_register_procfs(void)
         if (!proc_nvidia_gpu)
             goto failed;
 
-        entry = NV_CREATE_PROC_FILE("information", proc_nvidia_gpu,
-            nv_procfs_read_gpu_info, NULL, NULL, nv);
+        entry = proc_create_data("information", NV_PROC_RO, proc_nvidia_gpu,
+            &nv_procfs_gpu_info_fops, nv);
         if (!entry)
             goto failed;
 
-        entry = NV_CREATE_PROC_FILE("registry", proc_nvidia_gpu,
-            nv_procfs_read_registry,
-            nv_procfs_write_registry,
+        entry = proc_create_data("registry", NV_PROC_RW, proc_nvidia_gpu,
             &nv_procfs_registry_fops, nv);
         if (!entry)
             goto failed;
@@ -789,18 +831,21 @@ int nv_register_procfs(void)
             if (!proc_nvidia_agp)
                 goto failed;
 
-            entry = NV_CREATE_PROC_FILE("status", proc_nvidia_agp,
-                nv_procfs_read_agp_status, NULL, NULL, nv);
+            entry = proc_create_data("status", NV_PROC_RO, proc_nvidia_agp,
+                &nv_procfs_read_agp_status_fops, nv);
+
             if (!entry)
                 goto failed;
 
-            entry = NV_CREATE_PROC_FILE("host-bridge", proc_nvidia_agp,
-                nv_procfs_read_agp_info, NULL, NULL, NULL);
+            entry = proc_create("host-bridge", NV_PROC_RO, proc_nvidia_agp,
+                &nv_procfs_read_agp_info_fops);
+
             if (!entry)
                 goto failed;
 
-            entry = NV_CREATE_PROC_FILE("gpu", proc_nvidia_agp,
-                nv_procfs_read_agp_info, NULL, NULL, nv);
+            entry = proc_create_data("gpu", NV_PROC_RO, proc_nvidia_agp,
+                &nv_procfs_read_agp_info_gpu_fops, nv);
+
             if (!entry)
                 goto failed;
         }
@@ -809,7 +854,7 @@ int nv_register_procfs(void)
     return 0;
 #if defined(CONFIG_PROC_FS)
 failed:
-    nv_procfs_unregister_all(proc_nvidia);
+    remove_proc_subtree("nvidia", proc_nvidia);
     return -1;
 #endif
 }
@@ -817,6 +862,6 @@ failed:
 void nv_unregister_procfs(void)
 {
 #if defined(CONFIG_PROC_FS)
-    nv_procfs_unregister_all(proc_nvidia);
+    remove_proc_subtree("nvidia", proc_nvidia);
 #endif
 }
-- 
1.7.9.5

