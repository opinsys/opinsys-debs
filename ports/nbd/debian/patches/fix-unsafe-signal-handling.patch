nbd-server: fix unsafe signal handling

Previously, signal handlers themselves were entered only once, but they called
posixly unsafe, non-reentrant, functions, such as syslog(). If a signal was
caught in the middle of execution of such function, consequences were
undefined. In practice, nbd-server was observed to deadlock during the execution
of sigchld_handler() with following kind of system call trace:

  sendto(7, "<31>Mar 30 15:26:26 nbd_server[1"..., 59, MSG_NOSIGNAL, NULL, 0) = 59
  --- SIGCHLD (Child exited) @ 0 (0) ---
  wait4(-1, [{WIFEXITED(s) && WEXITSTATUS(s) == 0}], WNOHANG, NULL) = 14367
  futex(0x7f8881903734, FUTEX_WAIT_PRIVATE, 2, NULL

This patch fixes the problem by moving all signal handling logic away from the
signal handler context to the main loop. Signal handlers just set atomic flags
whenever a signal is received and hence are safe to call at any point.

Furthermore, select() is replaced with pselect() to avoid race conditions with
signal flag tests.

Author: Tuomas Räsänen <tuomasjjrasanen@tjjr.fi>

Index: nbd-3.3/nbd-server.c
===================================================================
--- nbd-3.3.orig/nbd-server.c	2015-03-31 13:38:34.000000000 +0300
+++ nbd-3.3/nbd-server.c	2015-03-31 13:39:30.108139614 +0300
@@ -177,6 +177,16 @@
 #define NEG_OLD		(1 << 1)
 #define NEG_MODERN	(1 << 2)
 
+static volatile sig_atomic_t is_sigchld_caught; /**< Flag set by
+						     SIGCHLD handler
+						     to mark a child
+						     exit */
+
+static volatile sig_atomic_t is_sigterm_caught; /**< Flag set by
+						     SIGTERM handler
+						     to mark a exit
+						     request */
+
 static volatile sig_atomic_t is_sighup_caught; /**< Flag set by SIGHUP
                                                     handler to mark a
                                                     reconfiguration
@@ -1079,23 +1089,8 @@
  * @param s the signal we're handling (must be SIGCHLD, or something
  * is severely wrong)
  **/
-void sigchld_handler(int s) {
-        int status;
-	int* i;
-	pid_t pid;
-
-	while((pid=waitpid(-1, &status, WNOHANG)) > 0) {
-		if(WIFEXITED(status)) {
-			msg(LOG_INFO, "Child exited with %d", WEXITSTATUS(status));
-		}
-		i=g_hash_table_lookup(children, &pid);
-		if(!i) {
-			msg(LOG_INFO, "SIGCHLD received for an unknown child with PID %ld", (long)pid);
-		} else {
-			DEBUG("Removing %d from the list of children", pid);
-			g_hash_table_remove(children, &pid);
-		}
-	}
+void sigchld_handler(int s G_GNUC_UNUSED) {
+	is_sigchld_caught = 1;
 }
 
 /**
@@ -1117,11 +1112,8 @@
  * @param s the signal we're handling (must be SIGTERM, or something
  * is severely wrong).
  **/
-void sigterm_handler(int s) {
-	g_hash_table_foreach(children, killchild, NULL);
-	unlink(pidfname);
-
-	exit(EXIT_SUCCESS);
+void sigterm_handler(int s G_GNUC_UNUSED) {
+	is_sigterm_caught = 1;
 }
 
 /**
@@ -2226,6 +2218,7 @@
         signal(SIGCHLD, SIG_DFL);
         signal(SIGTERM, SIG_DFL);
         signal(SIGHUP, SIG_DFL);
+        sigemptyset(&oldset);
 out:
         sigprocmask(SIG_SETMASK, &oldset, NULL);
         return pid;
@@ -2416,6 +2409,7 @@
 		signal(SIGCHLD, SIG_DFL);
 		signal(SIGTERM, SIG_DFL);
 		signal(SIGHUP, SIG_DFL);
+		sigemptyset(&oldset);
 		sigprocmask(SIG_SETMASK, &oldset, NULL);
 
 		g_hash_table_destroy(children);
@@ -2523,6 +2517,8 @@
 	int sock;
 	fd_set mset;
 	fd_set rset;
+	sigset_t blocking_mask;
+	sigset_t original_mask;
 
 	/* 
 	 * Set up the master fd_set. The set of descriptors we need
@@ -2544,7 +2540,49 @@
 		FD_SET(sock, &mset);
 		max=sock>max?sock:max;
 	}
+
+	if (sigemptyset(&blocking_mask) == -1)
+		err("failed to initialize blocking_mask: %m");
+
+	if (sigaddset(&blocking_mask, SIGCHLD) == -1)
+		err("failed to add SIGCHLD to blocking_mask: %m");
+
+	if (sigaddset(&blocking_mask, SIGTERM) == -1)
+		err("failed to add SIGTERM to blocking_mask: %m");
+
+	if (sigprocmask(SIG_BLOCK, &blocking_mask, &original_mask) == -1)
+		err("failed to block signals: %m");
+
 	for(;;) {
+		if (is_sigterm_caught) {
+			is_sigterm_caught = 0;
+			g_hash_table_foreach(children, killchild, NULL);
+			unlink(pidfname);
+
+			exit(EXIT_SUCCESS);
+		}
+
+		if (is_sigchld_caught) {
+			int status;
+			int* i;
+			pid_t pid;
+
+			is_sigchld_caught = 0;
+
+			while((pid=waitpid(-1, &status, WNOHANG)) > 0) {
+				if(WIFEXITED(status)) {
+					msg(LOG_INFO, "Child exited with %d", WEXITSTATUS(status));
+				}
+				i=g_hash_table_lookup(children, &pid);
+				if(!i) {
+					msg(LOG_INFO, "SIGCHLD received for an unknown child with PID %ld", (long)pid);
+				} else {
+					DEBUG("Removing %d from the list of children", pid);
+					g_hash_table_remove(children, &pid);
+				}
+			}
+		}
+
                 /* SIGHUP causes the root server process to reconfigure
                  * itself and add new export servers for each newly
                  * found export configuration group, i.e. spawn new
@@ -2579,7 +2617,7 @@
                 }
 
 		memcpy(&rset, &mset, sizeof(fd_set));
-		if(select(max+1, &rset, NULL, NULL, NULL)>0) {
+		if (pselect(max + 1, &rset, NULL, NULL, NULL, &original_mask) > 0) {
 
 			DEBUG("accept, ");
 			for(i=0; i < modernsocks->len; i++) {
