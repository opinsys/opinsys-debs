=== modified file 'shell/cc-shell-category-view.c'
Index: gnome-control-center-3.3.91/shell/cc-shell-category-view.c
===================================================================
--- gnome-control-center-3.3.91.orig/shell/cc-shell-category-view.c	2012-03-05 15:04:56.000000000 +0100
+++ gnome-control-center-3.3.91/shell/cc-shell-category-view.c	2012-03-06 17:52:14.823082999 +0100
@@ -31,12 +31,14 @@
 enum
 {
   PROP_NAME = 1,
+  PROP_ICON,
   PROP_MODEL
 };
 
 struct _CcShellCategoryViewPrivate
 {
   gchar *name;
+  GIcon *icon;
   GtkTreeModel *model;
   GtkWidget *iconview;
 };
@@ -55,6 +57,10 @@
       g_value_set_string (value, priv->name);
       break;
 
+    case PROP_ICON:
+      g_value_set_object (value, priv->icon);
+      break;
+
     case PROP_MODEL:
       g_value_set_object (value, priv->model);
       break;
@@ -78,6 +84,10 @@
       priv->name = g_value_dup_string (value);
       break;
 
+    case PROP_ICON:
+      priv->icon = g_value_dup_object (value);
+      break;
+
     case PROP_MODEL:
       priv->model = g_value_dup_object (value);
       break;
@@ -91,6 +101,12 @@
 {
   CcShellCategoryViewPrivate *priv = CC_SHELL_CATEGORY_VIEW (object)->priv;
 
+  if (priv->icon)
+    {
+      g_object_unref (priv->icon);
+      priv->icon = NULL;
+    }
+
   if (priv->model)
     {
       g_object_unref (priv->model);
@@ -142,16 +158,32 @@
   /* create the header if required */
   if (priv->name)
     {
+      GtkWidget *hbox;
+
       GtkWidget *label;
       PangoAttrList *attrs;
 
+      hbox = gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 6);
+
+      if (priv->icon)
+        {
+          GtkWidget *image;
+          image = gtk_image_new_from_gicon (priv->icon, GTK_ICON_SIZE_LARGE_TOOLBAR);
+          gtk_widget_show (image);
+          gtk_box_pack_start (GTK_BOX (hbox), image, FALSE, FALSE, 0);
+        }
+
       label = gtk_label_new (priv->name);
       attrs = pango_attr_list_new ();
-      pango_attr_list_insert (attrs, pango_attr_weight_new (PANGO_WEIGHT_BOLD));
+      pango_attr_list_insert (attrs, pango_attr_size_new (PANGO_SCALE * 12));
       gtk_label_set_attributes (GTK_LABEL (label), attrs);
       pango_attr_list_unref (attrs);
-      gtk_frame_set_label_widget (GTK_FRAME (object), label);
       gtk_widget_show (label);
+
+      gtk_box_pack_start (GTK_BOX (hbox), label, FALSE, FALSE, 0);
+      gtk_frame_set_label_widget (GTK_FRAME (object), hbox);
+      gtk_frame_set_label_align (GTK_FRAME (object), 0.0, 0.0);
+      gtk_widget_show (hbox);
     }
 
   /* add the iconview to the vbox */
@@ -186,6 +218,14 @@
                                | G_PARAM_STATIC_STRINGS);
   g_object_class_install_property (object_class, PROP_NAME, pspec);
 
+  pspec = g_param_spec_object ("icon",
+                               "Icon",
+                               "Icon of the category",
+                               G_TYPE_OBJECT,
+                               G_PARAM_READWRITE | G_PARAM_CONSTRUCT_ONLY
+                               | G_PARAM_STATIC_STRINGS);
+  g_object_class_install_property (object_class, PROP_ICON, pspec);
+
   pspec = g_param_spec_object ("model",
                                "Model",
                                "Model of the category",
@@ -206,10 +246,12 @@
 
 GtkWidget *
 cc_shell_category_view_new (const gchar  *name,
+                            GIcon        *icon,
                             GtkTreeModel *model)
 {
   return g_object_new (CC_TYPE_SHELL_CATEGORY_VIEW,
                        "name", name,
+                       "icon", icon,
                        "model", model, NULL);
 }
 
Index: gnome-control-center-3.3.91/shell/cc-shell-category-view.h
===================================================================
--- gnome-control-center-3.3.91.orig/shell/cc-shell-category-view.h	2011-11-07 18:22:02.000000000 +0100
+++ gnome-control-center-3.3.91/shell/cc-shell-category-view.h	2012-03-06 17:52:14.823082999 +0100
@@ -68,6 +68,7 @@
 GType cc_shell_category_view_get_type (void) G_GNUC_CONST;
 
 GtkWidget *cc_shell_category_view_new (const gchar  *name,
+                                       GIcon        *icon,
                                        GtkTreeModel *model);
 CcShellItemView* cc_shell_category_view_get_item_view (CcShellCategoryView *self);
 
Index: gnome-control-center-3.3.91/shell/cc-shell-model.c
===================================================================
--- gnome-control-center-3.3.91.orig/shell/cc-shell-model.c	2012-03-05 15:04:56.000000000 +0100
+++ gnome-control-center-3.3.91/shell/cc-shell-model.c	2012-03-06 17:52:14.823082999 +0100
@@ -43,7 +43,7 @@
   theme = gtk_icon_theme_get_default ();
 
   icon_info = gtk_icon_theme_lookup_by_gicon (theme, icon,
-                                              32, GTK_ICON_LOOKUP_FORCE_SIZE);
+                                              48, GTK_ICON_LOOKUP_FORCE_SIZE);
   if (icon_info)
     {
       pixbuf = gtk_icon_info_load_icon (icon_info, &err);
Index: gnome-control-center-3.3.91/shell/gnome-control-center.c
===================================================================
--- gnome-control-center-3.3.91.orig/shell/gnome-control-center.c	2012-03-05 15:04:56.000000000 +0100
+++ gnome-control-center-3.3.91/shell/gnome-control-center.c	2012-03-06 17:52:28.087083642 +0100
@@ -47,8 +47,9 @@
 /* Use a fixed width for the shell, since resizing horizontally is more awkward
  * for the user than resizing vertically
  * Both sizes are defined in https://live.gnome.org/Design/SystemSettings/ */
-#define FIXED_WIDTH 675
-#define FIXED_HEIGHT 530
+#define FIXED_WIDTH 850
+#define FIXED_HEIGHT 650
+#define SMALL_SCREEN_FIXED_HEIGHT 500
 
 #define MIN_ICON_VIEW_HEIGHT 300
 
@@ -86,6 +87,8 @@
 
   gchar *default_window_title;
   gchar *default_window_icon;
+
+  gboolean small_screen;
 };
 
 static const gchar *
@@ -310,7 +313,8 @@
   res = NULL;
   for (l = list; l; l = l->next)
     {
-      res = g_list_append (res, cc_shell_category_view_get_item_view (CC_SHELL_CATEGORY_VIEW (l->data)));
+      if (CC_IS_SHELL_CATEGORY_VIEW (l->data))
+        res = g_list_append (res, cc_shell_category_view_get_item_view (CC_SHELL_CATEGORY_VIEW (l->data)));
     }
 
   g_list_free (list);
@@ -583,6 +587,8 @@
 static void
 setup_search (GnomeControlCenter *shell)
 {
+  int margin = 12;
+  int spacing = 6;
   GtkWidget *search_scrolled, *search_view, *widget;
   GtkCellRenderer *renderer;
   GnomeControlCenterPrivate *priv = shell->priv;
@@ -602,7 +608,8 @@
   priv->search_view = search_view = cc_shell_item_view_new ();
   gtk_icon_view_set_item_orientation (GTK_ICON_VIEW (search_view),
                                       GTK_ORIENTATION_HORIZONTAL);
-  gtk_icon_view_set_spacing (GTK_ICON_VIEW (search_view), 6);
+  gtk_icon_view_set_margin (GTK_ICON_VIEW (search_view), margin);
+  gtk_icon_view_set_spacing (GTK_ICON_VIEW (search_view), spacing);
   gtk_icon_view_set_model (GTK_ICON_VIEW (search_view),
                            GTK_TREE_MODEL (priv->search_filter));
 
@@ -659,7 +666,8 @@
 
 static void
 maybe_add_category_view (GnomeControlCenter *shell,
-                         const char         *name)
+                         const char         *name,
+                         GIcon              *icon)
 {
   GtkTreeModel *filter;
   GtkWidget *categoryview;
@@ -667,6 +675,16 @@
   if (g_hash_table_lookup (shell->priv->category_views, name) != NULL)
     return;
 
+  if (g_hash_table_size (shell->priv->category_views) > 0)
+    {
+      GtkWidget *separator;
+      separator = gtk_separator_new (GTK_ORIENTATION_HORIZONTAL);
+      gtk_widget_set_margin_top (separator, 11);
+      gtk_widget_set_margin_bottom (separator, 10);
+      gtk_box_pack_start (GTK_BOX (shell->priv->main_vbox), separator, FALSE, FALSE, 0);
+      gtk_widget_show (separator);
+    }
+
   /* create new category view for this category */
   filter = gtk_tree_model_filter_new (GTK_TREE_MODEL (shell->priv->store),
                                       NULL);
@@ -674,7 +692,7 @@
                                           (GtkTreeModelFilterVisibleFunc) category_filter_func,
                                           g_strdup (name), g_free);
 
-  categoryview = cc_shell_category_view_new (name, filter);
+  categoryview = cc_shell_category_view_new (name, icon, filter);
   gtk_box_pack_start (GTK_BOX (shell->priv->main_vbox), categoryview, FALSE, TRUE, 0);
 
   g_signal_connect (cc_shell_category_view_get_item_view (CC_SHELL_CATEGORY_VIEW (categoryview)),
@@ -722,13 +740,15 @@
         {
           GMenuTreeDirectory *subdir;
           const gchar *dir_name;
+          GIcon *dir_icon;
           GMenuTreeIter *sub_iter;
           GMenuTreeItemType sub_next_type;
 
           subdir = gmenu_tree_iter_get_directory (iter);
           dir_name = gmenu_tree_directory_get_name (subdir);
+          dir_icon = gmenu_tree_directory_get_icon (subdir);
 
-          maybe_add_category_view (shell, dir_name);
+          maybe_add_category_view (shell, dir_name, dir_icon);
 
           /* add the items from this category to the model */
           sub_iter = gmenu_tree_directory_iter (subdir);
@@ -765,7 +785,10 @@
 {
   GnomeControlCenterPrivate *priv = shell->priv;
 
-  gtk_container_set_border_width (GTK_CONTAINER (shell->priv->main_vbox), 10);
+  gtk_widget_set_margin_top( shell->priv->main_vbox, 8);
+  gtk_widget_set_margin_bottom( shell->priv->main_vbox, 8);
+  gtk_widget_set_margin_left( shell->priv->main_vbox, 12);
+  gtk_widget_set_margin_right( shell->priv->main_vbox, 12);
   gtk_container_set_focus_vadjustment (GTK_CONTAINER (shell->priv->main_vbox),
                                        gtk_scrolled_window_get_vadjustment (GTK_SCROLLED_WINDOW (shell->priv->scrolled_window)));
 
@@ -822,7 +845,10 @@
       gtk_widget_hide (W (priv->builder, "home-button"));
       gtk_widget_show (W (priv->builder, "search-entry"));
       gtk_widget_hide (W (priv->builder, "lock-button"));
-      gtk_scrolled_window_set_min_content_height (GTK_SCROLLED_WINDOW (priv->scrolled_window), FIXED_HEIGHT - 50);
+      gtk_scrolled_window_set_min_content_height (GTK_SCROLLED_WINDOW (priv->scrolled_window),
+        (priv->small_screen
+        ? SMALL_SCREEN_FIXED_HEIGHT
+        : FIXED_HEIGHT) - 50 );
     }
   else
     {
@@ -1093,6 +1119,23 @@
   return retval;
 }
 
+static gint
+get_monitor_height (void)
+{
+  GdkScreen *screen;
+  gint x, y;
+  GdkRectangle rect;
+  GdkDisplay *display = gdk_display_get_default ();
+  GdkDeviceManager *device_manager = gdk_display_get_device_manager (display);
+  GdkDevice *device = gdk_device_manager_get_client_pointer (device_manager);
+
+  gdk_device_get_position (device, &screen, &x, &y);
+
+  gint monitor = gdk_screen_get_monitor_at_point (screen, x, y);
+  gdk_screen_get_monitor_geometry (screen, monitor, &rect);
+  return rect.height;
+}
+
 static void
 gnome_control_center_init (GnomeControlCenter *self)
 {
@@ -1101,6 +1144,8 @@
 
   priv = self->priv = CONTROL_CENTER_PRIVATE (self);
 
+  priv->small_screen = get_monitor_height() <= FIXED_HEIGHT;
+
   /* load the user interface */
   priv->builder = gtk_builder_new ();
 
@@ -1114,6 +1159,8 @@
 
   /* connect various signals */
   priv->window = W (priv->builder, "main-window");
+  if (priv->small_screen)
+    gtk_window_set_resizable (GTK_WINDOW (priv->window), TRUE);
   g_signal_connect_swapped (priv->window, "delete-event", G_CALLBACK (g_object_unref), self);
   g_signal_connect (priv->window, "key_press_event",
                     G_CALLBACK (window_key_press_event), self);
@@ -1158,6 +1205,9 @@
 void
 gnome_control_center_present (GnomeControlCenter *center)
 {
+  if (center->priv->small_screen) {
+    gtk_window_maximize (GTK_WINDOW (center->priv->window));
+  }
   gtk_window_present (GTK_WINDOW (center->priv->window));
 }
 
Index: gnome-control-center-3.3.91/shell/shell-search-renderer.c
===================================================================
--- gnome-control-center-3.3.91.orig/shell/shell-search-renderer.c	2012-03-05 15:04:56.000000000 +0100
+++ gnome-control-center-3.3.91/shell/shell-search-renderer.c	2012-03-06 17:52:14.831082999 +0100
@@ -215,7 +215,7 @@
 
   shell_search_renderer_set_layout (SHELL_SEARCH_RENDERER (cell), widget);
 
-  pango_layout_set_width (priv->layout, PANGO_SCALE * 180);
+  pango_layout_set_width (priv->layout, PANGO_SCALE * 164);
   pango_layout_get_pixel_extents (priv->layout, NULL, &rect);
 
   if (width) *width = rect.width;
@@ -281,6 +281,8 @@
   ShellSearchRendererPrivate *priv = SHELL_SEARCH_RENDERER (cell)->priv;
   PangoRectangle rect;
   GtkStyleContext *context;
+  gint layout_height;
+  gint vcenter_offset;
 
   context = gtk_widget_get_style_context (widget);
 
@@ -288,11 +290,14 @@
 
   pango_layout_get_pixel_extents (priv->layout, NULL, &rect);
 
+  pango_layout_get_pixel_size (priv->layout, NULL, &layout_height);
+  vcenter_offset = (cell_area->height - layout_height) / 2;
+
   cairo_save (cr);
 
   gtk_render_layout (context, cr,
                      cell_area->x,
-                     cell_area->y,
+                     cell_area->y + vcenter_offset,
                      priv->layout);
 
   cairo_restore (cr);
