--- a/scheduler/conf.c
+++ b/scheduler/conf.c
@@ -79,6 +79,7 @@
   { "DefaultShared",		&DefaultShared,		CUPSD_VARTYPE_BOOLEAN },
   { "DirtyCleanInterval",	&DirtyCleanInterval,	CUPSD_VARTYPE_TIME },
   { "ErrorPolicy",		&ErrorPolicy,		CUPSD_VARTYPE_STRING },
+  { "IdleExitTimeout",		&ExitOnIdleTimeout,	CUPSD_VARTYPE_TIME },
   { "FilterLimit",		&FilterLimit,		CUPSD_VARTYPE_INTEGER },
   { "FilterNice",		&FilterNice,		CUPSD_VARTYPE_INTEGER },
 #ifdef HAVE_GSSAPI
@@ -754,6 +755,7 @@
   MaxSubscriptionsPerUser    = 0;
   DefaultLeaseDuration       = 86400;
   MaxLeaseDuration           = 0;
+  ExitOnIdleTimeout          = 0;
 
 #ifdef HAVE_LAUNCHD
   LaunchdTimeout = 10;
--- a/scheduler/conf.h
+++ b/scheduler/conf.h
@@ -246,6 +246,9 @@
 					/* SSL/TLS options */
 #endif /* HAVE_SSL */
 
+VAR int			ExitOnIdleTimeout	VALUE(0);
+					/* Time after which an idle cupsd will exit */
+
 #ifdef HAVE_LAUNCHD
 VAR int			LaunchdTimeout		VALUE(10);
 					/* Time after which an idle cupsd will exit */
--- a/scheduler/main.c
+++ b/scheduler/main.c
@@ -120,6 +120,8 @@
      char *argv[])			/* I - Command-line arguments */
 {
   int			i;		/* Looping var */
+  char			*val;		/* Value of environment variable */
+  int			t = -1;		/* Timeout */
   char			*opt;		/* Option character */
   int			fg;		/* Run in the foreground */
   int			fds;		/* Number of ready descriptors */
@@ -145,6 +147,8 @@
 #else
   time_t		netif_time = 0;	/* Time since last network update */
 #endif /* __APPLE__ */
+  int			idle_exit;
+					/* Idle exit on select timeout? */
 #if HAVE_LAUNCHD
   int			launchd_idle_exit;
 					/* Idle exit on select timeout? */
@@ -169,6 +173,11 @@
 
   fg = 0;
 
+  if (val = getenv("CUPSD_EXIT_ON_IDLE_TIMEOUT"))
+  {
+    t = atoi(val);
+  }
+
 #ifdef HAVE_LAUNCHD
   if (getenv("CUPSD_LAUNCHD"))
   {
@@ -310,6 +319,21 @@
 	      fg             = 1;
 	      break;
 
+	  case 'x' : /* Exit on idle timeout */
+	      i ++;
+	      if (i >= argc)
+	      {
+	        _cupsLangPuts(stderr, _("cupsd: Expected exit-on-idle timeout in seconds "
+		                        "after \"-x\" option."));
+	        usage(1);
+	      }
+
+	      if ((t = atoi(argv[i])) < 0)
+		_cupsLangPrintf(stderr,
+				_("cupsd: Invalid exit-on-idle timeout value \"%s\"."),
+				argv[i]);
+	      break;
+
 	  default : /* Unknown option */
               _cupsLangPrintf(stderr, _("cupsd: Unknown option \"%c\" - "
 	                                "aborting."), *opt);
@@ -563,6 +587,13 @@
   }
 
  /*
+  * Exit-on-idle timeout set by command line or environment variable
+  */
+
+  if (t >= 0)
+    ExitOnIdleTimeout = t;
+
+ /*
   * Clean out old temp files and printer cache data.
   */
 
@@ -812,6 +843,26 @@
     if ((timeout = select_timeout(fds)) > 1 && LastEvent)
       timeout = 1;
 
+   /*
+    * If no other work is scheduled and we've set the exit-on-idle timeout
+    * then timeout after 'ExitOnIdleTimeout' seconds of inactivity...
+    */
+
+    if (ExitOnIdleTimeout && timeout >= ExitOnIdleTimeout &&
+        !cupsArrayCount(ActiveJobs) &&
+	(!Browsing || !BrowseLocalProtocols || !cupsArrayCount(Printers)))
+    {
+      cupsdLogMessage(CUPSD_LOG_DEBUG, "cupsd is idle, scheduling shutdown in %d seconds.",
+                      ExitOnIdleTimeout);
+      timeout		= ExitOnIdleTimeout;
+      idle_exit = 1;
+    }
+    else
+    {
+      cupsdLogMessage(CUPSD_LOG_DEBUG, "cupsd is not idle any more, canceling shutdown.");
+      idle_exit = 0;
+    }
+
 #if HAVE_LAUNCHD
    /*
     * If no other work is scheduled and we're being controlled by
@@ -925,6 +976,20 @@
     }
 #endif /* !__APPLE__ */
 
+   /*
+    * If no other work is scheduled and we've set the exit-on-idle timeout
+    * then timeout after 'ExitOnIdleTimeout' seconds of inactivity...
+    */
+
+    if (!fds && idle_exit)
+    {
+      cupsdLogMessage(CUPSD_LOG_INFO,
+                      "Printer sharing is off and there are no jobs pending, "
+		      "shutting down for now.");
+      stop_scheduler = 1;
+      break;
+    }
+
 #if HAVE_LAUNCHD
    /*
     * If no other work was scheduled and we're being controlled by launchd
