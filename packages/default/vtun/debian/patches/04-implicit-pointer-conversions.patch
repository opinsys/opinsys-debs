04-implicit-pointer-conversions.dpatch by Mart√≠n Ferrari <martin.ferrari@gmail.com>

http://sourceforge.net/support/tracker.php?aid=1744571

 Patch for correct declaration of types and functions. Missing includes,
 forward declarations and also I had to replace getpt with posix_openpt,
 because for some obscure reason it was not being defined. Anyway,
 posix_openpt is the portable way of doing it.

@DPATCH@
Index: vtun/generic/pty_dev.c
===================================================================
--- vtun.orig/generic/pty_dev.c
+++ vtun/generic/pty_dev.c
@@ -19,7 +19,9 @@
 /*
  * $Id: pty_dev.c,v 1.4.2.2 2008/01/07 22:36:13 mtbishop Exp $
  */ 
-
+/* Althought differing from documentation, this is necessary to have
+ * posix_openpt in GNU libc */
+#define _XOPEN_SOURCE 600
 #include "config.h"
 
 #include <unistd.h>
@@ -39,10 +41,10 @@
 int pty_open(char *sl_name)
 {
     int  mr_fd;
-#if defined (HAVE_GETPT) && defined (HAVE_GRANTPT) && defined (HAVE_UNLOCKPT) && defined (HAVE_PTSNAME)
+#if defined (HAVE_POSIX_OPENPT) && defined (HAVE_GRANTPT) && defined (HAVE_UNLOCKPT) && defined (HAVE_PTSNAME)
     char *ptyname;
 
-    if((mr_fd=getpt()) < 0)
+    if((mr_fd=posix_openpt(O_RDWR|O_NOCTTY)) < 0)
  	return -1;
     if(grantpt(mr_fd) != 0)
 	return -1;
Index: vtun/lfd_encrypt.c
===================================================================
--- vtun.orig/lfd_encrypt.c
+++ vtun/lfd_encrypt.c
@@ -44,6 +44,7 @@
 #include <strings.h>
 #include <string.h>
 #include <time.h>
+#include <arpa/inet.h>
 
 #include "vtun.h"
 #include "linkfd.h"
@@ -101,6 +102,11 @@ EVP_CIPHER_CTX ctx_dec;	/* decrypt */
 EVP_CIPHER_CTX ctx_enc_ecb;	/* sideband ecb encrypt */
 EVP_CIPHER_CTX ctx_dec_ecb;	/* sideband ecb decrypt */
 
+int send_msg(int len, char *in, char **out);
+int send_ib_mesg(int *len, char **in);
+int recv_msg(int len, char *in, char **out);
+int recv_ib_mesg(int *len, char **in);
+
 int prep_key(char **key, int size, struct vtun_host *host)
 {
    int tmplen, halflen;
Index: vtun/lfd_lzo.c
===================================================================
--- vtun.orig/lfd_lzo.c
+++ vtun/lfd_lzo.c
@@ -35,6 +35,7 @@
 
 #ifdef HAVE_LZO
 
+#include <lzoutil.h>
 #include "lzo1x.h"
 #include "lzoutil.h"
 
Index: vtun/lfd_shaper.c
===================================================================
--- vtun.orig/lfd_shaper.c
+++ vtun/lfd_shaper.c
@@ -31,6 +31,7 @@
 #include "vtun.h"
 #include "linkfd.h"
 #include "lib.h"
+#include <time.h>
 
 /* 
  * Shaper module. 
Index: vtun/lib.c
===================================================================
--- vtun.orig/lib.c
+++ vtun/lib.c
@@ -38,6 +38,7 @@
 #include "vtun.h"
 #include "linkfd.h"
 #include "lib.h"
+#include <time.h>
 
 volatile sig_atomic_t __io_canceled = 0;
 
Index: vtun/lib.h
===================================================================
--- vtun.orig/lib.h
+++ vtun/lib.h
@@ -23,6 +23,7 @@
 #define _VTUN_LIB_H
 
 #include "config.h"
+#include <unistd.h>
 #include <sys/types.h>
 #include <signal.h>
 #include <errno.h>
Index: vtun/lock.c
===================================================================
--- vtun.orig/lock.c
+++ vtun/lock.c
@@ -37,6 +37,7 @@
 #include "linkfd.h"
 #include "lib.h" 
 #include "lock.h"
+#include <time.h>
 
 int create_lock(char * file)
 {
Index: vtun/server.c
===================================================================
--- vtun.orig/server.c
+++ vtun/server.c
@@ -49,6 +49,7 @@
 #include "auth.h"
 
 #include "compat.h"
+#include "netlib.h"
 
 static volatile sig_atomic_t server_term;
 static void sig_term(int sig)
