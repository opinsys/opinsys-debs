Description: Prevent lxc container from shutting down the host
Author: Chuck Short <zulcss@ubuntu.com>
Forwarded: No
diff -Naurp libvirt-1.0.2.orig/src/lxc/lxc_driver.c libvirt-1.0.2/src/lxc/lxc_driver.c
--- libvirt-1.0.2.orig/src/lxc/lxc_driver.c	2013-01-24 10:18:58.000000000 -0600
+++ libvirt-1.0.2/src/lxc/lxc_driver.c	2013-03-25 09:22:22.421907213 -0500
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2010-2012 Red Hat, Inc.
+ * Copyright (C) 2010-2013 Red Hat, Inc.
  * Copyright IBM Corp. 2008
  *
  * lxc_driver.c: linux container driver functions
@@ -2761,13 +2761,19 @@ lxcDomainShutdownFlags(virDomainPtr dom,
     virLXCDriverPtr driver = dom->conn->privateData;
     virLXCDomainObjPrivatePtr priv;
     virDomainObjPtr vm;
+    virDomainFSDefPtr root;
     char *vroot = NULL;
     int ret = -1;
-    int rc;
+    int rc = 0;
+    bool methodSignal;
+    bool methodInitctl;
 
     virCheckFlags(VIR_DOMAIN_SHUTDOWN_INITCTL |
                   VIR_DOMAIN_SHUTDOWN_SIGNAL, -1);
 
+    methodSignal = !!(flags & VIR_DOMAIN_SHUTDOWN_SIGNAL);
+    methodInitctl = !!(flags & VIR_DOMAIN_SHUTDOWN_INITCTL);
+
     lxcDriverLock(driver);
     vm = virDomainFindByUUID(&driver->domains, dom->uuid);
     lxcDriverUnlock(driver);
@@ -2781,6 +2787,7 @@ lxcDomainShutdownFlags(virDomainPtr dom,
     }
 
     priv = vm->privateData;
+    root = virDomainGetRootFilesystem(vm->def);
 
     if (!virDomainObjIsActive(vm)) {
         virReportError(VIR_ERR_OPERATION_INVALID,
@@ -2800,27 +2807,31 @@ lxcDomainShutdownFlags(virDomainPtr dom,
         goto cleanup;
     }
 
-    if (flags == 0 ||
-        (flags & VIR_DOMAIN_SHUTDOWN_INITCTL)) {
-        if ((rc = virInitctlSetRunLevel(VIR_INITCTL_RUNLEVEL_POWEROFF,
-                                        vroot)) < 0) {
+    if (root && root->src) {
+        if (flags == 0)
+            methodSignal = methodInitctl = true;
+    } else if (methodInitctl) {
+        virReportError(VIR_ERR_OPERATION_UNSUPPORTED, "%s",
+                       _("Cannot shutdown container using initctl "
+                         "without separated namespace"));
+        goto cleanup;
+    } else {
+        methodSignal = true;
+    }
+
+    if (methodInitctl) {
+        rc = virInitctlSetRunLevel(VIR_INITCTL_RUNLEVEL_POWEROFF, vroot);
+        if (rc < 0)
             goto cleanup;
-        }
-        if (rc == 0 && flags != 0 &&
-            ((flags & ~VIR_DOMAIN_SHUTDOWN_INITCTL) == 0)) {
+        if (rc == 0 && !methodSignal) {
             virReportError(VIR_ERR_OPERATION_UNSUPPORTED, "%s",
                            _("Container does not provide an initctl pipe"));
             goto cleanup;
         }
-    } else {
-        rc = 0;
     }
-
-    if (rc == 0 &&
-        (flags == 0 ||
-         (flags & VIR_DOMAIN_SHUTDOWN_SIGNAL))) {
-        if (kill(priv->initpid, SIGTERM) < 0 &&
-            errno != ESRCH) {
+    if (rc == 0 && methodSignal) {
+        ret = kill(priv->initpid, SIGTERM);
+        if (ret < 0 && errno != ESRCH) {
             virReportSystemError(errno,
                                  _("Unable to send SIGTERM to init pid %llu"),
                                  (unsigned long long)priv->initpid);
